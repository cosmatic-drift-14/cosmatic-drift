using System.Linq;
using Content.Client.UserInterface.Controls;
using Content.Client.UserInterface.Systems.Guidebook;
using Content.Shared._CD.Silicons.Borgs;
using Content.Shared.Guidebook;
using Content.Shared.Silicons.Borgs;
using Content.Shared.Silicons.Borgs.Components;
using Robust.Client.AutoGenerated;
using Robust.Client.UserInterface.Controls;
using Robust.Client.UserInterface.XAML;
using Robust.Shared.Prototypes;

namespace Content.Client.Silicons.Borgs;

/// <summary>
/// Menu used by borgs to select their type.
/// </summary>
/// <seealso cref="BorgSelectTypeUserInterface"/>
/// <seealso cref="BorgSwitchableTypeComponent"/>
[GenerateTypedNameReferences]
public sealed partial class BorgSelectTypeMenu : FancyWindow
{
    [Dependency] private readonly IPrototypeManager _prototypeManager = default!;

    private BorgTypePrototype? _selectedBorgType;

    public event Action<ProtoId<BorgTypePrototype>>? ConfirmedBorgType;
    public event Action<BorgSubtypePrototype>? ConfirmedBorgSubtype;

    [ValidatePrototypeId<GuideEntryPrototype>]
    private static readonly List<ProtoId<GuideEntryPrototype>> GuidebookEntries = new() { "Cyborgs", "Robotics" };

    public BorgSelectTypeMenu()
    {
        RobustXamlLoader.Load(this);
        IoCManager.InjectDependencies(this);

        var group = new ButtonGroup();
        foreach (var borgType in _prototypeManager.EnumeratePrototypes<BorgTypePrototype>().OrderBy(PrototypeName))
        {
            var button = new Button
            {
                Text = PrototypeName(borgType),
                Group = group,
            };
            button.OnPressed += _ =>
            {
                _selectedBorgType = borgType;
                UpdateInformation(borgType);
            };
            SelectionsContainer.AddChild(button);
        }

        ConfirmTypeButton.OnPressed += ConfirmButtonPressed;
        HelpGuidebookIds = GuidebookEntries;

        // CD changes below
        ChassisSpriteSelection.SubtypeSelected += () =>
            ConfirmTypeButton.Disabled = ChassisSpriteSelection._selectedBorgSubtype == null;
    }

    private void UpdateInformation(BorgTypePrototype prototype)
    {
        _selectedBorgType = prototype;

        InfoContents.Visible = true;
        InfoPlaceholder.Visible = false;

        NameLabel.Text = PrototypeName(prototype);
        DescriptionLabel.Text = Loc.GetString($"borg-type-{prototype.ID}-desc");
        ChassisView.SetPrototype(prototype.DummyPrototype);

        // CD changes below
        ChassisSpriteSelection.FillContainer(prototype);
        ConfirmTypeButton.Disabled = ChassisSpriteSelection._selectedBorgSubtype == null;

    }

    private void ConfirmButtonPressed(BaseButton.ButtonEventArgs obj)
    {
        if (_selectedBorgType == null)
            return;

        ConfirmedBorgType?.Invoke(_selectedBorgType);
    }

    private static string PrototypeName(BorgTypePrototype prototype)
    {
        return Loc.GetString($"borg-type-{prototype.ID}-name");
    }
}
