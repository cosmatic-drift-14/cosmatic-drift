using Content.Client.Guidebook;
using Content.Client.UserInterface.Controls;
using Robust.Client.AutoGenerated;
using Robust.Client.UserInterface.Controls;
using Robust.Client.UserInterface.XAML;
using Robust.Shared.ContentPack;
using Robust.Shared.Utility;

namespace Content.Client._CD.WelcomeMessage;

[GenerateTypedNameReferences]
public sealed partial class WelcomeWindow : FancyWindow
{
    [Dependency] private readonly IResourceManager _resourceManager = default!;
    [Dependency] private readonly DocumentParsingManager _parsingMan = default!;
    [Dependency] private readonly ILogManager _logManager = default!;

    private readonly ISawmill _sawmill;

    public WelcomeWindow()
    {
        RobustXamlLoader.Load(this);
        IoCManager.InjectDependencies(this);
        _sawmill = _logManager.GetSawmill("_CD.we.WelcomePopup");

        PopupCloseButton.OnPressed += _ =>
        {
            Close();
        };
    }

    public int LoadContents(ResPath path)
    {
        using var file = _resourceManager.ContentFileReadText(path);

        var txt = file.ReadToEnd();
        if (!_parsingMan.TryAddMarkup(Contents, txt))
        {
            Contents.AddChild(new Label() { Text = "ERROR: Failed to parse document." });
            _sawmill.Error($"Failed to parse contents of guide document {path}.");
        }

        // This does not really need any hash more complex than the standard GetHashCode hash
        return txt.GetHashCode();
    }
}
