using System.Linq;
using Content.Shared._CD.Records;
using Content.Shared.StationRecords;
using Robust.Client.AutoGenerated;
using Robust.Client.UserInterface.CustomControls;
using Robust.Client.UserInterface.XAML;

namespace Content.Client._CD.Records.UI;

[GenerateTypedNameReferences]
public sealed partial class CharacterRecordViewer : DefaultWindow
{
    public Action<NetEntity?>? OnKeySelected;
    public Action<GeneralStationRecordFilterType, string?>? OnFiltersChanged;

    private bool _isPopulating;
    private GeneralStationRecordFilterType _filterType;

    private RecordConsoleType? _type;

    private RecordViewEntryPopup _entryView = new();
    private List<CharacterRecords.RecordEntry>? _entries;

    public CharacterRecordViewer()
    {
        RobustXamlLoader.Load(this);

        // There is no reason why we can't just steal the GeneralStationRecordFilter class.
        // If wizden adds a new kind of filtering we want to replicate it here.
        foreach (var item in Enum.GetValues<GeneralStationRecordFilterType>())
        {
            RecordFilterType.AddItem(GetTypeFilterLocals(item), (int)item);
        }

        RecordListing.OnItemSelected += _ =>
        {
            if (!RecordListing.GetSelected().Any())
                return;
            var selected = RecordListing.GetSelected().First();
            OnKeySelected?.Invoke((NetEntity)selected.Metadata!);
        };

        RecordListing.OnItemDeselected += _ =>
        {
            // When we populate the records, we clear the contents of the listing.
            // This could cause a deselection but we don't want to really deselect because it would
            // interrupt what the player is doing.
            if (!_isPopulating)
                OnKeySelected?.Invoke(null);
        };

        RecordFilters.OnPressed += _ =>
        {
            OnFiltersChanged?.Invoke(_filterType, RecordFiltersValue.Text);
        };

        RecordFiltersReset.OnPressed += _ =>
        {
            OnFiltersChanged?.Invoke(GeneralStationRecordFilterType.Name, null);
        };

        RecordFilterType.OnItemSelected += eventArgs =>
        {
            var type = (GeneralStationRecordFilterType)eventArgs.Id;
            _filterType = type;
            RecordFilterType.SelectId(eventArgs.Id);
        };

        RecordEntryViewButton.OnPressed += _ =>
        {
            if (_entries == null || !RecordEntryList.GetSelected().Any())
                return;
            int idx = RecordEntryList.IndexOf(RecordEntryList.GetSelected().First());
            _entryView.SetContents(_entries[idx]);
            _entryView.Open();
        };

        OnClose += () => _entryView.Close();

        RecordEntryViewType.AddItem(Loc.GetString("department-Security"));
        RecordEntryViewType.AddItem(Loc.GetString("department-Medical"));
        RecordEntryViewType.AddItem(Loc.GetString("humanoid-profile-editor-cd-records-employment"));
        RecordEntryViewType.OnItemSelected += args =>
        {
            RecordEntryViewType.SelectId(args.Id);
            // This is a hack to get the server to send us another packet with the new entries
            OnFiltersChanged?.Invoke(_filterType, RecordFiltersValue.Text);
        };
    }

    // If we are using wizden's class we might as well use their localization.
    private string GetTypeFilterLocals(GeneralStationRecordFilterType type)
    {
        return Loc.GetString($"general-station-record-{type.ToString().ToLower()}-filter");
    }

    public void UpdateState(CharacterRecordConsoleState state)
    {
        RecordEntryViewType.Visible = false;
        _type = state.ConsoleType;
        if (state.RecordListing == null)
        {
            RecordListingStatus.Visible = true;
            RecordListing.Visible = false;
            RecordListingStatus.Text = Loc.GetString("cd-record-viewer-empty-state");
            RecordContainer.Visible = false;
            RecordContainerStatus.Visible = false;
            return;
        }

        if (state.Filter != null)
        {
            RecordFiltersValue.SetText(state.Filter.Value);
            RecordFilterType.SelectId((int) state.Filter.Type);
        }

        RecordListingStatus.Visible = false;
        RecordListing.Visible = true;

        switch (_type)
        {
            case RecordConsoleType.Employment:
                // We should only use extended filtering options for sec records.
                RecordFilterType.Visible = false;
                RecordFilterType.SelectId((int)GeneralStationRecordFilterType.Name);

                Title = Loc.GetString("cd-character-records-viewer-title-employ");
                break;
            case RecordConsoleType.Medical:
                RecordFilterType.Visible = false;
                RecordFilterType.SelectId((int)GeneralStationRecordFilterType.Name);

                Title = Loc.GetString("cd-character-records-viewer-title-med");
                break;
            case RecordConsoleType.Security:
                RecordFilterType.Visible = true;

                Title = Loc.GetString("cd-character-records-viewer-title-sec");
                break;
            case RecordConsoleType.Admin:
                RecordFilterType.Visible = true;
                Title = "Admin records console";
                RecordEntryViewType.Visible = true;

                break;
        }

        _isPopulating = true;

        RecordListing.Clear();
        foreach (var (key, txt) in state.RecordListing)
        {
            RecordListing.AddItem(txt, metadata: key);
        }

        _isPopulating = false;

        if (state.SelectedRecord == null)
        {
            RecordContainerStatus.Visible = true;
            RecordContainer.Visible = false;
            return;
        }

        RecordContainerStatus.Visible = false;
        RecordContainer.Visible = true;

        var record = state.SelectedRecord!;
        var cr = record.CharacterRecords;

        RecordContainerName.Text = record.Name;
        RecordContainerAge.Text = record.Age.ToString();
        RecordContainerJob.Text = record.JobTitle; /* At some point in the future we might want to display the icon */
        RecordContainerGender.Text = record.Gender.ToString();
        RecordContainerSpecies.Text = record.Species;
        RecordContainerHeight.Text = cr.Height + " " + UnitConversion.GetImperialDisplayLength(cr.Height);
        RecordContainerWeight.Text = cr.Weight + " " + UnitConversion.GetImperialDisplayMass(cr.Weight);
        RecordContainerContactName.Text = cr.EmergencyContactName;

        RecordContainerEmployment.Visible = false;
        RecordContainerMedical.Visible = false;
        RecordContainerSecurity.Visible = false;

        switch (_type)
        {
            case RecordConsoleType.Employment:
                SetEntries(cr.EmploymentEntries);
                UpdateRecordBoxEmployment(record);
                break;
            case RecordConsoleType.Medical:
                SetEntries(cr.MedicalEntries);
                UpdateRecordBoxMedical(record);
                break;
            case RecordConsoleType.Security:
                SetEntries(cr.SecurityEntries);
                UpdateRecordBoxSecurity(record);
                break;
            case RecordConsoleType.Admin:
                UpdateRecordBoxEmployment(record);
                UpdateRecordBoxMedical(record);
                UpdateRecordBoxSecurity(record);
                switch ((RecordConsoleType) RecordEntryViewType.SelectedId)
                {
                case RecordConsoleType.Employment:
                    SetEntries(cr.EmploymentEntries, true);
                    break;
                case RecordConsoleType.Medical:
                    SetEntries(cr.MedicalEntries, true);
                    break;
                case RecordConsoleType.Security:
                    SetEntries(cr.SecurityEntries, true);
                    break;
                }
                break;
        }
    }

    private void SetEntries(List<CharacterRecords.RecordEntry> entries, bool addIndex = false)
    {
        _entries = entries;
        RecordEntryList.Clear();
        var i = 0;
        foreach (var entry in entries)
        {
            RecordEntryList.AddItem(addIndex ? $"({i.ToString()}) " + entry.Title : entry.Title);
            ++i;
        }
    }

    private void UpdateRecordBoxEmployment(FullCharacterRecords record)
    {
        RecordContainerEmployment.Visible = true;
        RecordContainerWorkAuth.Text = record.CharacterRecords.HasWorkAuthorization ? "yes" : "no";
    }

    private void UpdateRecordBoxMedical(FullCharacterRecords record)
    {
        RecordContainerMedical.Visible = true;
        var cr = record.CharacterRecords;
        RecordContainerMedical.Visible = true;
        RecordContainerAllergies.Text = cr.Allergies;
        RecordContainerDrugAllergies.Text = cr.DrugAllergies;
        RecordContainerPostmortem.Text = cr.PostmortemInstructions;
        RecordContainerSex.Text = record.Sex.ToString();
    }

    private void UpdateRecordBoxSecurity(FullCharacterRecords record)
    {
        RecordContainerSecurity.Visible = true;
        RecordContainerIdentFeatures.Text = record.CharacterRecords.IdentifyingFeatures;
        RecordContainerFingerprint.Text = record.Fingerprint ?? Loc.GetString("cd-character-records-viewer-unknown");
        RecordContainerDNA.Text = record.DNA ?? Loc.GetString("cd-character-records-viewer-unknown");
    }
}
