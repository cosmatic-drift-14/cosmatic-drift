using Content.Client.UserInterface.Controls;
using Pidgin.Configuration;
using Robust.Client.AutoGenerated;
using Robust.Client.UserInterface.Controls;
using Robust.Client.UserInterface.CustomControls;
using Robust.Client.UserInterface.XAML;

namespace Content.Client._CD.Silicons.StationAi;

[GenerateTypedNameReferences]
public sealed partial class AiShellSelectionMenu : DefaultWindow
{
    public Action<NetEntity?>? JumpToShell;
    public Action<NetEntity?>? EnterShell;

    [Dependency] private readonly IEntityManager _ent = default!;

    private NetEntity? _selected;

    private EntityQuery<MetaDataComponent> _metadataQuery;

    public AiShellSelectionMenu()
    {
        RobustXamlLoader.Load(this);
        IoCManager.InjectDependencies(this);

        JumpToShellButton.OnPressed += args =>
        {
            JumpToShell?.Invoke(_selected);
        };

        SelectShellButton.OnPressed += args =>
        {
            EnterShell?.Invoke(_selected);
        };


        _metadataQuery = _ent.GetEntityQuery<MetaDataComponent>();
    }

    public void Populate(List<EntityUid> compControllableShells)
    {
        ShellsList.Clear();

        foreach (var shell in compControllableShells)
        {
            var netShell = _ent.GetNetEntity(shell);
            var item = ShellsList.AddItem(_metadataQuery.GetComponent(shell).EntityName, metadata: netShell);

            item.OnSelected += args =>
            {
                JumpToShellButton.Disabled = false;
                SelectShellButton.Disabled = false;
                _selected = args.Metadata as NetEntity?;
            };

            item.OnDeselected += _ =>
            {
                JumpToShellButton.Disabled = true;
                SelectShellButton.Disabled = true;
                _selected = null;
            };

        }
    }
}

