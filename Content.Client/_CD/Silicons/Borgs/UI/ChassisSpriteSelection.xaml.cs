using System.Linq;
using System.Numerics;
using Content.Shared._CD.Silicons;
using Content.Shared._CD.Silicons.Borgs;
using Content.Shared.Silicons.Borgs;
using Robust.Client.AutoGenerated;
using Robust.Client.ResourceManagement;
using Robust.Client.UserInterface;
using Robust.Client.UserInterface.Controls;
using Robust.Client.UserInterface.XAML;
using Robust.Shared.Prototypes;
using Robust.Shared.Serialization.TypeSerializers.Implementations;
using Robust.Shared.Utility;

namespace Content.Client._CD.Silicons.Borgs.UI;

[GenerateTypedNameReferences]
public sealed partial class ChassisSpriteSelection : Control
{
    [Dependency] private readonly IPrototypeManager _proto = default!;
    [Dependency] private readonly IResourceCache _resource = default!;

    public BorgSubtypePrototype? SubtypePrototype;
    public event Action? SubtypeSelected;

    public const int PrototypeViewSize = 2;

    public ChassisSpriteSelection()
    {
        RobustXamlLoader.Load(this);
        IoCManager.InjectDependencies(this);
    }

    public void Update(BorgTypePrototype borgTypePrototype)
    {
        MainContainer.Visible = true;

        OptionsContainer.RemoveAllChildren();

        var buttonGroup = new ButtonGroup();
        List<Button> buttons = new List<Button>();
        buttons.Add(CreateDefaultSubtypeButton(borgTypePrototype, buttonGroup));

        foreach (var subtypePrototype in _proto.EnumeratePrototypes<BorgSubtypePrototype>())
        {
            // Only add subtypes of the current selected 'main' borg type (engineering, medical, etc.)
            if(subtypePrototype.ParentType != borgTypePrototype.ID)
                continue;

            var button = new Button
            {
                ToolTip = Loc.GetString($"cd-borg-{borgTypePrototype.ID}-subtype-{subtypePrototype.ID}-name"),
                Group = buttonGroup,
                MinHeight = 32,
            };

            button.OnPressed += _ =>
            {
                SubtypePrototype = subtypePrototype;
                SubtypeSelected?.Invoke();
            };

            button.AddChild(CreateEntityPrototypeView(subtypePrototype.DummyPrototype));
            buttons.Add(button);
        }

        foreach (var button in buttons)
        {
            OptionsContainer.AddChild(button);
        }
    }

    private Button CreateDefaultSubtypeButton(BorgTypePrototype borgTypePrototype, ButtonGroup group)
    {
        var button = new Button
        {
            ToolTip = "default",
            Group = group,
            MinHeight = 32,
        };

        button.OnPressed += _ =>
        {
            SubtypePrototype = null;
            SubtypeSelected?.Invoke();
        };

        button.AddChild(CreateEntityPrototypeView(borgTypePrototype.DummyPrototype));

        return button;
    }

    private EntityPrototypeView CreateEntityPrototypeView(EntProtoId entProtoId)
    {
        var entPrototypeView = new EntityPrototypeView();

        entPrototypeView.SetPrototype(entProtoId);
        entPrototypeView.Scale *= PrototypeViewSize;

        return entPrototypeView;
    }
}

