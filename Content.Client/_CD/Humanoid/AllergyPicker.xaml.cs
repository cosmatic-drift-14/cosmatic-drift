using System.Collections.Immutable;
using System.Linq;
using Content.Shared.Chemistry.Reagent;
using Content.Shared.FixedPoint;
using Robust.Client.AutoGenerated;
using Robust.Client.Graphics;
using Robust.Client.UserInterface.Controls;
using Robust.Client.UserInterface.XAML;
using Robust.Shared.Prototypes;
using SixLabors.ImageSharp;
using SixLabors.ImageSharp.PixelFormats;

namespace Content.Client._CD.Humanoid;

[GenerateTypedNameReferences]
public sealed partial class AllergyPicker : BoxContainer
{
    [Dependency] private readonly IPrototypeManager _prototypeManager = default!;

    private readonly Texture _textureWhite;

    private readonly Action<Dictionary<ReagentPrototype, FixedPoint2>> _onUpdateAllergies;

    private Dictionary<ReagentPrototype, FixedPoint2> _currentAllergies = new();

    private ItemList.Item? _selectedAllergy;
    private int _selectedReagentGroup;
    private ItemList.Item? _selectedUnusedAllergy;

    private readonly ImmutableList<(string, ImmutableList<ReagentPrototype>)> _reagentGroups;


    // As hundredths
    public enum Intensity
    {
        Mild = 0_50,
        Moderate = 1_00,
        Severe = 5_00,
        Extreme = 100_00,
    }

    public AllergyPicker(Action<Dictionary<ReagentPrototype, FixedPoint2>> onUpdateAllergies)
    {
        _onUpdateAllergies = onUpdateAllergies;

        RobustXamlLoader.Load(this);
        IoCManager.InjectDependencies(this);

        var white = new Image<Rgba32>(32, 32);
        for (var x = 0; x < 32; x++)
        {
            for (var y = 0; y < 32; y++)
            {
                white[x, y] = new Rgba32(255, 255, 255, 255);
            }
        }

        _textureWhite = Texture.LoadFromImage(white);

        _reagentGroups = _prototypeManager.EnumeratePrototypes<ReagentPrototype>()
            .Select(reagent => reagent.Group)
            .Distinct()
            .Order()
            .Select(group =>
            {
                var reagents = _prototypeManager.EnumeratePrototypes<ReagentPrototype>()
                    .Where(reagent => reagent.Group.Equals(group))
                    .OrderBy(reagent => reagent.LocalizedName)
                    .ToImmutableList();
                return (group, reagents);
            })
            .Where(tuple => !tuple.reagents.IsEmpty)
            .ToImmutableList();

        PopulateIntensities();

        CReagentGroupButton.OnItemSelected += OnGroupChange;
        CReagentSearch.OnTextChanged += args => PopulateReagents(args.Text);

        CReagents.OnItemSelected += item => _selectedUnusedAllergy = CReagents[item.ItemIndex];

        CAllergyAdd.OnPressed += _ => AllergyAdd();
        CAllergyRemove.OnPressed += _ => AllergyRemove();

        CAllergies.OnItemSelected += OnAllergySelected;

        CIntensityButton.OnItemSelected += args =>
        {
            if (CIntensityButton.IsItemDisabled(0))
                CIntensityButton.RemoveItem(0);

            CIntensityButton.SelectId(args.Id);
            _currentAllergies[(ReagentPrototype)_selectedAllergy!.Metadata!] = FixedPoint2.FromCents(args.Id);
            _onUpdateAllergies.Invoke(_currentAllergies);
        };
    }

    private void PopulateIntensities(FixedPoint2? custom = null)
    {
        CIntensityButton.Clear();
        if (custom is not null)
        {
            CIntensityButton.AddItem(custom.Value.ToString(), custom.Value.Value);
            CIntensityButton.SetItemDisabled(0, true);
        }
        foreach (var level in Enum.GetValues<Intensity>())
        {
            CIntensityButton.AddItem(
                Loc.GetString("cd-allergies-editor-intensity-" + Enum.GetName(level)!.ToLower()),
                (int)level
            );
        }
    }

    private ItemList.Item GetReagentItem(ItemList list, ReagentPrototype reagent)
    {
        return new ItemList.Item(list)
        {
            Text = reagent.LocalizedName[0].ToString().ToUpper() + reagent.LocalizedName[1..],
            Selectable = true,
            Metadata = reagent,
            Icon = _textureWhite,
            IconModulate = reagent.SubstanceColor,
        };
    }

    public void SetData(Dictionary<ReagentPrototype, FixedPoint2> newAllergies)
    {
        _currentAllergies = newAllergies;
        PopulateReagents(CReagentSearch.Text);
        PopulateAllergies();
    }

    private void SetupCategoryButtons()
    {
        CReagentGroupButton.Clear();

        foreach (var (group, _) in _reagentGroups)
        {
            CReagentGroupButton.AddItem(group);
        }

        CReagentGroupButton.SelectId(_selectedReagentGroup);
    }

    private void PopulateReagents(string filter)
    {
        SetupCategoryButtons();

        CReagents.Clear();
        _selectedUnusedAllergy = null;

        var sortedReagents = _reagentGroups[_selectedReagentGroup]
            .Item2
            .Where(m =>
                m.ID.Contains(filter, StringComparison.CurrentCultureIgnoreCase) ||
                m.LocalizedName.Contains(filter, StringComparison.CurrentCultureIgnoreCase)
            );

        foreach (var reagent in sortedReagents)
        {
            if (_currentAllergies.ContainsKey(reagent))
                continue;

            CReagents.Add(GetReagentItem(CReagents, reagent));
        }
    }

    private void PopulateAllergies()
    {
        CAllergies.Clear();
        CAllergyAttributes.Visible = false;
        _selectedAllergy = null;

        foreach (var reagent in _currentAllergies.Keys)
        {
            CAllergies.Add(GetReagentItem(CAllergies, reagent));
        }
    }

    private void OnGroupChange(OptionButton.ItemSelectedEventArgs group)
    {
        CReagentGroupButton.SelectId(group.Id);
        _selectedReagentGroup = group.Id;
        PopulateReagents(CReagentSearch.Text);
        PopulateAllergies();
    }

    private void OnAllergySelected(ItemList.ItemListSelectedEventArgs item)
    {
        _selectedAllergy = CAllergies[item.ItemIndex];
        var intensity = _currentAllergies[(ReagentPrototype)_selectedAllergy.Metadata!];

        if (CIntensityButton.IsItemDisabled(0))
            CIntensityButton.RemoveItem(0);

        if (!CIntensityButton.TrySelectId(intensity.Value))
        {
            PopulateIntensities(intensity);
            CIntensityButton.SelectId(intensity.Value);
        }

        CAllergyAttributes.Visible = true;
    }

    private void AllergyAdd()
    {
        if (_selectedUnusedAllergy is null)
            return;

        var reagent = (ReagentPrototype)_selectedUnusedAllergy.Metadata!;
        CReagents.Remove(_selectedUnusedAllergy);
        _selectedUnusedAllergy = null;

        _currentAllergies[reagent] = 1.0;
        CAllergies.Add(GetReagentItem(CAllergies, reagent));

        _onUpdateAllergies.Invoke(_currentAllergies);
    }

    private void AllergyRemove()
    {
        if (_selectedAllergy is null)
            return;

        var reagent = (ReagentPrototype)_selectedAllergy.Metadata!;

        _currentAllergies.Remove(reagent);

        CAllergies.Remove(_selectedAllergy);

        if (reagent.Group == _reagentGroups[_selectedReagentGroup].Item1)
        {
            CReagents.Add(GetReagentItem(CReagents, reagent));
            CReagents.SortItemsByText();
        }

        _selectedAllergy = null;
        CAllergyAttributes.Visible = false;
        _onUpdateAllergies.Invoke(_currentAllergies);
    }
}
