using System.Linq;
using System.Numerics;
using Content.Shared._CD.CartridgeLoader.Cartridges;
using Robust.Client.AutoGenerated;
using Robust.Client.UserInterface.Controls;
using Robust.Client.UserInterface.CustomControls;
using Robust.Client.UserInterface.XAML;

namespace Content.Client._CD.CartridgeLoader.Cartridges;

[GenerateTypedNameReferences]
public sealed partial class VoteCreationPopup : DefaultWindow
{
    public event Action<VoteData>? OnVoteCreated;

    private const int MaxOptions = 4;
    private readonly List<LineEdit> _optionInputs = new();

    public VoteCreationPopup()
    {
        RobustXamlLoader.Load(this);

        // Add initial option inputs
        AddOptionInput();
        AddOptionInput();

        // ContentsContainer trolling
        ContentsContainer.Margin = new Thickness(3);

        // Button handlers
        AddOptionButton.OnPressed += _ => AddOptionInput();
        CancelButton.OnPressed += _ => Close();
        CreateButton.OnPressed += _ => CreateVote();

        // Input validation
        QuestionInput.OnTextChanged += _ => ValidateInputs();
        DurationSpinBox.ValueChanged += _ => ValidateInputs();
    }

    private void AddOptionInput()
    {
        if (_optionInputs.Count >= MaxOptions)
            return;

        var container = new BoxContainer
        {
            Orientation = BoxContainer.LayoutOrientation.Horizontal,
            Margin = new Thickness(0, 2),
        };

        var inputPanel = new PanelContainer
        {
            StyleClasses = { "ButtonSquare" },
            HorizontalExpand = true,
        };

        var input = new LineEdit
        {
            PlaceHolder = Loc.GetString("vote-link-option-placeholder", ("number", _optionInputs.Count + 1)),
            HorizontalExpand = true,
        };

        input.OnTextChanged += _ => ValidateInputs();
        _optionInputs.Add(input);

        inputPanel.AddChild(input);
        container.AddChild(inputPanel);

        // Add remove button if we have more than 2 options
        if (_optionInputs.Count > 2)
        {
            var removeButton = new Button
            {
                Text = "Ã—",
                StyleClasses = { "ButtonSquare" },
                MinSize = new Vector2(32, 0),
                Margin = new Thickness(4, 0, 0, 0),
            };
            removeButton.OnPressed += _ => RemoveOptionInput(container, input);
            container.AddChild(removeButton);
        }

        OptionsContainer.AddChild(container);
        AddOptionButton.Disabled = _optionInputs.Count >= MaxOptions;
    }

    private void RemoveOptionInput(BoxContainer container, LineEdit input)
    {
        _optionInputs.Remove(input);
        OptionsContainer.RemoveChild(container);
        AddOptionButton.Disabled = _optionInputs.Count >= MaxOptions;
        ValidateInputs();
    }

    private void ValidateInputs()
    {
        var isValid = !string.IsNullOrWhiteSpace(QuestionInput.Text) &&
                      _optionInputs.Count >= 2 &&
                      _optionInputs.All(input => !string.IsNullOrWhiteSpace(input.Text));

        CreateButton.Disabled = !isValid;
    }

    private void CreateVote()
    {
        var options = _optionInputs
            .Where(input => !string.IsNullOrWhiteSpace(input.Text))
            .Select((input, index) => new VoteOptionData(
                input.Text.Trim(),
                (VoteOption)index))
            .ToList();

        var voteData = new VoteData
        {
            Question = QuestionInput.Text.Trim(),
            Options = options,
            Duration = TimeSpan.FromSeconds(DurationSpinBox.Value),
        };

        OnVoteCreated?.Invoke(voteData);
        Close();
    }

    public void ClearInputs()
    {
        QuestionInput.Text = string.Empty;

        // Remove all but first two option inputs
        while (_optionInputs.Count > 2)
        {
            var lastInput = _optionInputs[^1];
            if (lastInput.Parent is BoxContainer container)
                RemoveOptionInput(container, lastInput);
        }

        // Clear remaining inputs
        foreach (var input in _optionInputs)
        {
            input.Text = string.Empty;
        }

        DurationSpinBox.Value = 120;
        ValidateInputs();
    }
}
