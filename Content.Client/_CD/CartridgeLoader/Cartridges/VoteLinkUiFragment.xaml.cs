using System.Linq;
using System.Numerics;
using Content.Shared._CD.CartridgeLoader.Cartridges;
using Robust.Client.AutoGenerated;
using Robust.Client.Player;
using Robust.Client.UserInterface.Controls;
using Robust.Client.UserInterface.XAML;
using Robust.Shared.Timing;

namespace Content.Client._CD.CartridgeLoader.Cartridges;

[GenerateTypedNameReferences]
public sealed partial class VoteLinkUiFragment : BoxContainer
{
    [Dependency] private readonly IGameTiming _timing = default!;
    [Dependency] private readonly IPlayerManager _player = default!;
    [Dependency] private readonly IEntityManager _entity = default!;

    public event Action<VoteOption>? OnOptionSelected;
    public event Action<VoteData>? OnCreateVote;

    private readonly VoteCreationPopup _createVotePopup;
    private readonly VoteHistoryPopup _historyPopup;

    private VoteData? _activeVote;
    private VoteData? _lastCompletedVote;
    private VoteOption? _currentVote = VoteOption.Abstain; // The vote confirmed by the server
    private VoteOption? _pendingVote; // The vote we're waiting for server confirmation on
    private float _updateAccumulator;

    private Label? _timerLabel;

    public readonly Color VoteCountColor = Color.FromHex("#666666");
    public readonly Color SelectedButtonColor = Color.FromHex("#173717");
    public readonly Color DefaultButtonColor = Color.FromHex("#464B4B");

    public VoteLinkUiFragment()
    {
        IoCManager.InjectDependencies(this);
        RobustXamlLoader.Load(this);

        _createVotePopup = new VoteCreationPopup();
        _historyPopup = new VoteHistoryPopup();

        _createVotePopup.OnVoteCreated += voteData =>
        {
            OnCreateVote?.Invoke(voteData);
        };

        CreateVoteButton.OnPressed += _ =>
        {
            _createVotePopup.ClearInputs();
            _createVotePopup.OpenCentered();
        };

        HistoryButton.OnPressed += _ =>
        {
            _historyPopup.OpenCentered();
        };
    }

    protected override void FrameUpdate(FrameEventArgs args)
    {
        base.FrameUpdate(args);

        if (_activeVote == null)
            return;

        _updateAccumulator += args.DeltaSeconds;

        // Update every second
        if (_updateAccumulator >= 1.0f)
        {
            _updateAccumulator = 0;
            UpdateTimer();
        }
    }

    private void UpdateTimer()
    {
        if (_timerLabel == null || _activeVote == null)
            return;

        var timeRemaining = _activeVote.TimeRemaining(_timing.CurTime);
        _timerLabel.Text = Loc.GetString("vote-link-time-remaining",
            ("time", timeRemaining.TotalSeconds.ToString("F0")));
    }

    private void TryVote(VoteOption newOption)
    {
        // Don't allow voting if we're waiting for server confirmation
        if (_pendingVote != null)
            return;

        // Don't revote for the same option
        if (_currentVote == newOption)
            return;

        _pendingVote = newOption;
        OnOptionSelected?.Invoke(newOption);
        UpdateVoteDisplay();
    }

    private void UpdateVoteDisplay()
    {
        if (_activeVote == null || ActiveVotes == null)
            return;

        ActiveVotes.RemoveAllChildren();
        CreateVoteDisplay(_activeVote);
    }

    public void UpdateState(VoteLinkUiState state)
    {
        if (ActiveVotes == null)
            return;

        _activeVote = state.ActiveVote;
        NoVotes.Visible = _activeVote == null;
        ActiveVotes.RemoveAllChildren();

        // Find the latest completed vote
        _lastCompletedVote = state.VoteHistory.LastOrDefault();
        UpdateLastVoteDisplay();

        var onCooldown = state.Cooldown > _timing.CurTime;
        // Update create vote button based on access, active vote state, and cooldown
        CreateVoteButton.Disabled = !state.HasAccess || _activeVote != null || onCooldown;

        // Update tooltip text based on button state
        CreateVoteButton.ToolTip = !state.HasAccess
            ? Loc.GetString("vote-link-no-access")
            : _activeVote != null
                ? Loc.GetString("vote-link-create-disabled")
                : onCooldown
                    ? Loc.GetString("vote-link-on-cooldown")
                    : null; // amazing

        // Update history popup if it exists
        _historyPopup.UpdateHistory(state.VoteHistory);

        if (_activeVote == null)
        {
            _currentVote = VoteOption.Abstain; // Reset to default abstain
            _pendingVote = null;
            _timerLabel = null;
            return;
        }

        // Update our current vote based on server state
        if (_player.LocalSession?.AttachedEntity is { } playerEntity)
        {
            var netEntity = _entity.GetNetEntity(playerEntity);
            if (_activeVote.HasVoted(netEntity))
            {
                var serverVote = _activeVote.GetCurrentVote(netEntity);
                if (serverVote != null)
                {
                    if (_pendingVote == serverVote)
                    {
                        // Server confirmed our pending vote
                        _currentVote = serverVote;
                        _pendingVote = null;
                    }
                    else if (_pendingVote == null)
                    {
                        // No pending vote, just update current
                        _currentVote = serverVote;
                    }
                }
            }
            else
            {
                {
                    // If we haven't voted yet, we're abstaining
                    _currentVote = VoteOption.Abstain;
                    _pendingVote = null;
                }
            }
        }

        UpdateVoteDisplay();
        // Timer will update itself on next frame

        // Update visibility of separators based on content
        LastVoteSeparator.Visible = _lastCompletedVote != null && _activeVote != null;
    }

    private void UpdateLastVoteDisplay()
    {
        if (_lastCompletedVote == null)
        {
            LastVoteContainer.Visible = false;
            return;
        }

        LastVoteContainer.Visible = true;
        LastVoteResults.RemoveAllChildren();
        LastVoteQuestion.Text = _lastCompletedVote.Question;

        // Calculate total votes (excluding abstains) for percentage
        var totalVotes = _lastCompletedVote.Options.Sum(o => _lastCompletedVote.GetVoteCount(o.Option));

        if (totalVotes > 0)
        {
            // Display options sorted by vote count
            foreach (var option in _lastCompletedVote.Options
                         .OrderByDescending(o => _lastCompletedVote.GetVoteCount(o.Option)))
            {
                var votes = _lastCompletedVote.GetVoteCount(option.Option);
                var percentage = (float)votes / totalVotes * 100;

                var resultLabel = new Label
                {
                    Text = $"{option.Text}: {votes} ({percentage:F1}%)",
                };

                LastVoteResults.AddChild(resultLabel);
            }

            // Add total votes
            LastVoteResults.AddChild(new Label
            {
                Text = Loc.GetString("vote-link-total-votes", ("total", totalVotes)),
                Modulate = VoteCountColor,
                Margin = new Thickness(0, 4, 0, 0),
            });

            // Add abstain count if any
            var abstainCount = _lastCompletedVote.GetVoteCount(VoteOption.Abstain);
            if (abstainCount > 0)
            {
                LastVoteResults.AddChild(new Label
                {
                    Text = Loc.GetString("vote-link-abstained-count", ("count", abstainCount)),
                    Modulate = VoteCountColor,
                });
            }
        }
        else
        {
            LastVoteResults.AddChild(new Label
            {
                Text = Loc.GetString("vote-link-no-votes-cast"),
                Modulate = Color.Gray,
            });
        }
    }

    private int GetPredictedVoteCount(VoteOption option, VoteData vote)
    {
        var baseCount = vote.GetVoteCount(option);

        if (_pendingVote != null)
        {
            // Decrement if we're moving away from this option
            if (_currentVote == option)
                baseCount--;

            // Increment if we're moving to this option
            if (_pendingVote == option)
                baseCount++;
        }

        return Math.Max(0, baseCount);
    }

    private int GetPredictedAbstainCount(VoteData vote)
    {
        return GetPredictedVoteCount(VoteOption.Abstain, vote);
    }

    private void CreateVoteDisplay(VoteData vote)
    {
        // Main vote container
        var votePanel = new PanelContainer
        {
            HorizontalExpand = true,
            StyleClasses = { "AngleRect" },
            Margin = new Thickness(0, 0, 0, 4),
        };

        var content = new BoxContainer
        {
            Orientation = LayoutOrientation.Vertical,
            HorizontalExpand = true,
            Margin = new Thickness(4, 2, 4, 2),
        };

        // Question and timer in highlighted section
        var headerPanel = new PanelContainer
        {
            StyleClasses = { "ButtonSquare" },
            Margin = new Thickness(0, 0, 0, 8),
        };

        var headerContent = new BoxContainer
        {
            Orientation = LayoutOrientation.Vertical,
            Margin = new Thickness(4, 2, 4, 2),
        };

        // Question
        headerContent.AddChild(new Label
        {
            Text = vote.Question,
            StyleClasses = { "LabelHeading" },
        });

        // Timer
        var timeRemaining = vote.TimeRemaining(_timing.CurTime);
        _timerLabel = new Label
        {
            Text = Loc.GetString("vote-link-time-remaining",
                ("time", timeRemaining.TotalSeconds.ToString("F0"))),
            Margin = new Thickness(0, 4, 0, 0),
        };
        headerContent.AddChild(_timerLabel);

        headerPanel.AddChild(headerContent);
        content.AddChild(headerPanel);

        // Vote options
        foreach (var option in vote.Options)
        {
            var optionContainer = new BoxContainer
            {
                Orientation = LayoutOrientation.Horizontal,
                HorizontalExpand = true,
                Margin = new Thickness(0, 2),
            };

            var isSelected = _pendingVote == option.Option || _pendingVote == null && _currentVote == option.Option;

            var button = new Button
            {
                Text = option.Text,
                HorizontalExpand = true,
                StyleClasses = { "OpenRight" },
            };

            button.ModulateSelfOverride = isSelected ? SelectedButtonColor : DefaultButtonColor;

            button.OnPressed += _ => TryVote(option.Option);
            optionContainer.AddChild(button);

            // Vote count panel
            var predictedVotes = GetPredictedVoteCount(option.Option, vote);
            var voteCountPanel = new PanelContainer
            {
                StyleClasses = { "ButtonSquare" },
                MinSize = new Vector2(48, 0),
                Margin = new Thickness(2, 0, 0, 0),
            };

            voteCountPanel.AddChild(new Label
            {
                Text = predictedVotes.ToString(),
                Align = Label.AlignMode.Center,
                Margin = new Thickness(4, 0),
            });

            optionContainer.AddChild(voteCountPanel);
            content.AddChild(optionContainer);
        }

        // Abstain option
        var abstainContainer = new BoxContainer
        {
            Orientation = LayoutOrientation.Horizontal,
            HorizontalExpand = true,
            Margin = new Thickness(0, 8, 0, 0),
        };

        var isAbstainSelected = _pendingVote == VoteOption.Abstain ||
                                _pendingVote == null && _currentVote == VoteOption.Abstain;

        var abstainButton = new Button
        {
            Text = Loc.GetString("vote-link-abstain"),
            HorizontalExpand = true,
            StyleClasses = { "OpenRight" },
        };

        abstainButton.ModulateSelfOverride = isAbstainSelected ? SelectedButtonColor : DefaultButtonColor;

        abstainButton.OnPressed += _ => TryVote(VoteOption.Abstain);
        abstainContainer.AddChild(abstainButton);

        var abstainCount = GetPredictedAbstainCount(vote);
        var abstainCountPanel = new PanelContainer
        {
            StyleClasses = { "ButtonSquare" },
            MinSize = new Vector2(48, 0),
            Margin = new Thickness(2, 0, 0, 0),
        };

        abstainCountPanel.AddChild(new Label
        {
            Text = abstainCount.ToString(),
            Align = Label.AlignMode.Center,
            Margin = new Thickness(4, 0),
        });

        abstainContainer.AddChild(abstainCountPanel);
        content.AddChild(abstainContainer);

        // Total votes
        var totalVotes = vote.Options.Sum(o => GetPredictedVoteCount(o.Option, vote));

        content.AddChild(new Label
        {
            Text = Loc.GetString("vote-link-total-votes", ("total", totalVotes)),
            Align = Label.AlignMode.Center,
            Margin = new Thickness(0, 8, 0, 0),
            Modulate = VoteCountColor,
        });

        votePanel.AddChild(content);
        ActiveVotes.AddChild(votePanel);
    }
}
