using System.Linq;
using Content.Client.Administration.UI.CustomControls;
using Content.Client.GameTicking.Managers;
using Content.Shared._CD.CartridgeLoader.Cartridges;
using Robust.Client.AutoGenerated;
using Robust.Client.UserInterface.Controls;
using Robust.Client.UserInterface.CustomControls;
using Robust.Client.UserInterface.XAML;

namespace Content.Client._CD.CartridgeLoader.Cartridges;

[GenerateTypedNameReferences]
public sealed partial class VoteHistoryPopup : DefaultWindow
{
    [Dependency] private readonly IEntityManager _entity = default!;

    private readonly ClientGameTicker _ticker;

    public VoteHistoryPopup()
    {
        IoCManager.InjectDependencies(this);
        RobustXamlLoader.Load(this);
        Title = Loc.GetString("vote-link-history-title");
        _ticker = _entity.System<ClientGameTicker>();
    }

    public void UpdateHistory(List<VoteData> history)
    {
        if (HistoryEntries == null)
            return;

        HistoryEntries.RemoveAllChildren();

        // Show no history label if empty
        NoHistoryLabel.Visible = history.Count == 0;
        if (history.Count == 0)
            return;

        foreach (var vote in history.OrderByDescending(v => v.StartTime))
        {
            var entry = new PanelContainer
            {
                HorizontalExpand = true,
                StyleClasses = { "AngleRect" },
                Margin = new Thickness(0, 0, 0, 8),
            };

            var content = new BoxContainer
            {
                Orientation = BoxContainer.LayoutOrientation.Vertical,
                HorizontalExpand = true,
                Margin = new Thickness(8),
            };

            // Question
            content.AddChild(new Label
            {
                Text = vote.Question,
                StyleClasses = { "LabelHeading" },
            });

            // Time
            var stationTime = vote.StartTime.Subtract(_ticker.RoundStartTimeSpan);
            content.AddChild(new Label
            {
                Text = Loc.GetString("vote-link-ended-time", ("time", stationTime.ToString(@"hh\:mm\:ss"))),
                Modulate = Color.Gray,
            });

            // Results in a panel
            var resultsPanel = new PanelContainer
            {
                StyleClasses = { "ButtonSquare" },
                Margin = new Thickness(0, 8, 0, 0),
            };

            var resultsContainer = new BoxContainer
            {
                Orientation = BoxContainer.LayoutOrientation.Vertical,
                HorizontalExpand = true,
                Margin = new Thickness(8),
            };

            // Calculate total votes for percentage (excluding abstains)
            var totalVotes = vote.Options.Sum(o => vote.GetVoteCount(o.Option));
            if (totalVotes > 0)
            {
                foreach (var option in vote.Options.OrderByDescending(o => vote.GetVoteCount(o.Option)))
                {
                    var votes = vote.GetVoteCount(option.Option);
                    var percentage = (float)votes / totalVotes * 100;

                    resultsContainer.AddChild(new Label
                    {
                        Text = $"{option.Text}: {votes} ({percentage:F1}%)",
                    });
                }
            }
            else
            {
                resultsContainer.AddChild(new Label
                {
                    Text = Loc.GetString("vote-link-no-votes-cast"),
                    Modulate = Color.Gray,
                });
            }

            // Add abstain count
            var abstainCount = vote.GetVoteCount(VoteOption.Abstain);
            if (abstainCount > 0)
            {
                resultsContainer.AddChild(new HSeparator
                {
                    Margin = new Thickness(0, 4),
                });

                resultsContainer.AddChild(new Label
                {
                    Text = Loc.GetString("vote-link-abstained-count", ("count", abstainCount)),
                    Modulate = Color.Gray,
                });
            }

            resultsPanel.AddChild(resultsContainer);
            content.AddChild(resultsPanel);
            entry.AddChild(content);
            HistoryEntries.AddChild(entry);
        }
    }
}
